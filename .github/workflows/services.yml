name: Services Workflow

on:
  workflow_dispatch:
    inputs:
      services:
        description: "JSON array of services with path and name keys"
        required: true
        default: '[{"path": "services/serviceA", "name": "serviceA"}]'
        type: string
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      infra: ${{ steps.set-services.outputs.infra }}
      docker: ${{ steps.set-services.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      #- name: run services tests
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  run: cd scripts && pip install -r requirements.txt && make test
      #- name: run services coverage
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  run: cd scripts && make coverage
      #- name: save coverage report
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: coverage-report
      #    path: scripts/htmlcov
      - name: Set services list
        id: set-services
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo 'services=${{ github.event.inputs.services }}' >> $GITHUB_OUTPUT
          else
            export OTEL_RESOURCE_ATTRIBUTES="git.commit=${{ github.sha }},service.name=github-actions-services,service.namespace=github-actions,deployment.environment=dev"
            export OTEL_EXPORTER_OTLP_ENDPOINT="https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"
            export OTEL_EXPORTER_OTLP_HEADERS="${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}"
            export OTEL_EXPORTER_OTLP_PROTOCOL="http/protobuf"
            export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
            pip install -r scripts/requirements.txt
            opentelemetry-bootstrap -a install
            if [ -z "${{ github.head_ref }}" ];
            then
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.ref_name }})
            else
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.head_ref }})
            fi
            echo "Last successful commit: ${last_successful_commit}"
            if ! git cat-file -e "${last_successful_commit}^{commit}" 2>/dev/null; then
              git fetch origin main
              last_successful_commit=$(git merge-base HEAD origin/main)
            fi
            services_all=$(opentelemetry-instrument python scripts/services.py --cmp ${last_successful_commit})
            services_json=$(echo "$services_all" | jq -c '.services')
            docker_json=$(echo "$services_all" | jq -c '.docker')
            infra_json=$(echo "$services_all" | jq -c '.infra')
            # Debug output
            echo "Generated services JSON: $services_json"
            echo "Generated infra JSON: $infra_json"
            echo "Generated docker JSON: $docker_json"

            echo "services=${services_json}" >> $GITHUB_OUTPUT
            echo "infra=${infra_json}" >> $GITHUB_OUTPUT
            echo "docker=${docker_json}" >> $GITHUB_OUTPUT
          fi
  publish_docker:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.docker) }}
    if: ${{ needs.setup.outputs.docker != '[]' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish docker image
        run: |
          echo "Publishing docker: ${{ matrix.service.name }}"
          echo "docker path: ${{ matrix.service.path }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make publish
          else
            echo "No Makefile found in ${{ matrix.service.path }}"
          fi
      - name: Login to GCP
        if: ${{ matrix.service.save != '' }}
        uses: google-github-actions/auth@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: access_token
      - name: Save data to GCS
        if: ${{ matrix.service.save != '' }}
        run: |
          echo "Saving data to GCS: ${{ matrix.service.name }}"
          echo ${{ matrix.service.save != '' }} > state.json
          # Authenticate gcloud with the federated credentials file
          if [ -n "${GOOGLE_APPLICATION_CREDENTIALS}" ] && [ -f "${GOOGLE_APPLICATION_CREDENTIALS}" ]; then
            gcloud auth login --cred-file="${GOOGLE_APPLICATION_CREDENTIALS}"
          fi
          gcloud auth list
          # Use gcloud storage (respects gcloud auth login with --cred-file)
          gcloud storage cp state.json gs://${{ secrets.GCP_BUCKET_NAME }}/${{ matrix.service.name }}/main.json
  build_services:
    needs: [setup, publish_docker]
    container:
      image: ${{ matrix.service.image }}
    runs-on: ubuntu-latest
    if: ${{ always() && needs.setup.outputs.services != '[]' && (needs.publish_docker.result == 'success' || needs.publish_docker.result == 'skipped') }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build service
        run: |
          echo "Building service: ${{ matrix.service.name }}"
          echo "Service path: ${{ matrix.service.path }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make build
          else
            echo "No Makefile found in ${{ matrix.service.path }}"
          fi
      - name: Save service artifacts
        if: ${{ matrix.service.artifact != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service.artifact }}
          path: ${{ matrix.service.artifact_path }}

      - name: Test service
        run: |
          echo "Testing service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make test
          else
            echo "No Makefile found for testing in ${{ matrix.service.path }}"
          fi
  build_infra:
    needs: [setup, publish_docker]
    container:
      image: ${{ matrix.service.image }}
    runs-on: ubuntu-latest
    if: ${{ always() && needs.setup.outputs.infra != '[]' && (needs.publish_docker.result == 'success' || needs.publish_docker.result == 'skipped' ) }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.infra) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Azure Login with OIDC
        if: ${{ matrix.service.authentication.azure == 'enabled' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to GCP
        if: ${{ matrix.service.authentication.gcp == 'enabled' }}
        uses: google-github-actions/auth@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: access_token
      #- uses: hashicorp/setup-terraform@v3
      #  with:
      #    terraform_version: "1.13.1"
      - name: Build service
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          [ -f "${HOME}/.config/gcloud/application_default_credentials.json" ] || mkdir -p ${HOME}/.config/gcloud && touch "${HOME}/.config/gcloud/application_default_credentials.json"
          echo "Building service: ${{ matrix.service.name }}"
          echo "Service path: ${{ matrix.service.path }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make build
          else
            echo "No Makefile found in ${{ matrix.service.path }}"
          fi
          echo ${{ github.ref_name == 'main' }}
          echo ${{ github.ref_name }}
      - name: Create tarball for artifacts
        if: ${{ matrix.service.artifact != '' }}
        run: tar -czf ${{ matrix.service.artifact }}.tar -C ${{ matrix.service.artifact_path }} .
      - name: Save service artifacts
        if: ${{ matrix.service.artifact != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service.artifact }}
          path: ${{ matrix.service.artifact }}.tar

      - name: Test service
        run: |
          echo "Testing service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make test
          else
            echo "No Makefile found for testing in ${{ matrix.service.path }}"
          fi
  publish_services:
    needs: [setup, build_services]
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref_name == 'main' && needs.build_services.result == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        if: ${{ matrix.service.artifact_load != '' }}
        with:
          name: ${{ matrix.service.artifact_load }}
          path: "${{ matrix.service.artifact_path }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish service
        run: |
          echo "Publishing service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make publish
          else
            echo "No Makefile found for publishing in ${{ matrix.service.path }}"
          fi
  deploy_infra:
    needs: [setup, build_infra]
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref_name == 'main' && needs.build_infra.result == 'success' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.infra) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        if: ${{ matrix.service.artifact_load != '' }}
        with:
          name: ${{ matrix.service.artifact_load }}
      - name: untar artifact
        if: ${{ matrix.service.artifact_load != '' }}
        run: mkdir -p ${{ matrix.service.artifact_path }} && tar --no-same-owner -xzf ${{ matrix.service.artifact_load }}.tar -C ${{ matrix.service.artifact_path }}
      - name: Azure Login with OIDC
        if: ${{ matrix.service.authentication.azure == 'enabled' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to GCP
        if: ${{ matrix.service.authentication.gcp == 'enabled' }}
        uses: google-github-actions/auth@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: access_token
      - name: Deploy service
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          echo "Deploying service: ${{ matrix.service.name }}"
          [ -f "${HOME}/.config/gcloud/application_default_credentials.json" ] || mkdir -p ${HOME}/.config/gcloud && touch "${HOME}/.config/gcloud/application_default_credentials.json"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make deploy
          else
            echo "No Makefile found for deployment in ${{ matrix.service.path }}"
          fi
  deploy_services:
    needs: [setup, deploy_infra, publish_services]
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref_name == 'main' && needs.deploy_infra.result == 'success' && needs.publish_services.result == 'success' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy service
        run: |
          echo "Deploying service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make deploy
          else
            echo "No Makefile found for deployment in ${{ matrix.service.path }}"
          fi
