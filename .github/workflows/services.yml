name: Services Workflow

on:
  workflow_dispatch:
    inputs:
      services:
        description: "JSON array of services with path and name keys"
        required: true
        default: '[{"path": "services/serviceA", "name": "serviceA"}]'
        type: string
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      infra: ${{ steps.set-services.outputs.infra }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: run services tests
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: cd scripts && pip install -r requirements.txt && make test
      - name: run services coverage
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: cd scripts && make coverage
      - name: save coverage report
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: scripts/htmlcov
      - run: |
          git log
          git status
          git rev-parse HEAD
      - name: Set services list
        id: set-services
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo 'services=${{ github.event.inputs.services }}' >> $GITHUB_OUTPUT
          else
            export OTEL_RESOURCE_ATTRIBUTES="git.commit=${{ github.sha }},service.name=github-actions-services,service.namespace=github-actions,deployment.environment=dev"
            export OTEL_EXPORTER_OTLP_ENDPOINT="https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"
            export OTEL_EXPORTER_OTLP_HEADERS="${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}"
            export OTEL_EXPORTER_OTLP_PROTOCOL="http/protobuf"
            export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
            pip install -r scripts/requirements.txt
            opentelemetry-bootstrap -a install
            if [ -z "${{ github.head_ref }}" ];
            then
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.ref_name }})
            else
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.head_ref }})
            fi
            echo "Last successful commit: ${last_successful_commit}"
            if ! git cat-file -e "${last_successful_commit}^{commit}" 2>/dev/null; then
              git fetch origin main
              last_successful_commit=$(git merge-base HEAD origin/main)
            fi
            git diff --name-only ${last_successful_commit}
            services_json=$(opentelemetry-instrument python scripts/services.py --cmp ${last_successful_commit})
            infra_json=$(opentelemetry-instrument python scripts/services.py --cmp ${last_successful_commit} --infra)
            # Debug output
            echo "Generated services JSON: $services_json"
            echo "Generated infra JSON: $infra_json"

            echo "services=${services_json}" >> $GITHUB_OUTPUT
            echo "infra=${infra_json}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: setup
    container:
      image: ${{ matrix.service.image }}
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.services != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build service
        run: |
          echo "Building service: ${{ matrix.service.name }}"
          echo "Service path: ${{ matrix.service.path }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make build
          else
            echo "No Makefile found in ${{ matrix.service.path }}"
          fi
      - name: Save service artifacts
        if: ${{ matrix.service.artifact != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service.artifact }}
          path: "${{ matrix.service.artifact_path }}"
          include-hidden-files: true

      - name: Test service
        run: |
          echo "Testing service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make test
          else
            echo "No Makefile found for testing in ${{ matrix.service.path }}"
          fi
  test:
    runs-on: ubuntu-latest
    steps:
      - run: az version
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - run: az account show
  publish:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        if: ${{ matrix.service.artifact_load != '' }}
        with:
          name: ${{ matrix.service.artifact_load }}
          path: "${{ matrix.service.artifact_path }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish service
        run: |
          echo "Publishing service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make publish
          else
            echo "No Makefile found for publishing in ${{ matrix.service.path }}"
          fi
  deploy-infra:
    needs: [setup, build]
    runs-on: ubuntu-latest
    #if: ${{ github.ref_name == 'main' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.infra) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        if: ${{ matrix.service.artifact_load != '' }}
        with:
          name: ${{ matrix.service.artifact_load }}
          path: "${{ matrix.service.artifact_path }}"
      - name: Deploy service
        run: |
          echo "Deploying service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make deploy
          else
            echo "No Makefile found for deployment in ${{ matrix.service.path }}"
          fi
  deploy-services:
    needs: [setup]
    runs-on: ubuntu-latest
    #if: ${{ github.ref_name == 'main' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy service
        run: |
          echo "Deploying service: ${{ matrix.service.name }}"
          cd "${{ matrix.service.path }}"
          if [ -f "Makefile" ]; then
            make deploy
          else
            echo "No Makefile found for deployment in ${{ matrix.service.path }}"
          fi
