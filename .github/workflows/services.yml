name: Services Workflow

on:
  workflow_dispatch:
    inputs:
      services:
        description: "JSON array of services with path and name keys"
        required: true
        default: '[{"path": "services/serviceA", "name": "serviceA"}]'
        type: string
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      infra: ${{ steps.set-services.outputs.infra }}
      docker: ${{ steps.set-services.outputs.docker }}
      git_branch: ${{ steps.set-services.outputs.GIT_BRANCH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      #- name: run services tests
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  run: cd scripts && pip install -r requirements.txt && make test
      #- name: run services coverage
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  run: cd scripts && make coverage
      #- name: save coverage report
      #  if: ${{ github.event_name != 'workflow_dispatch' }}
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: coverage-report
      #    path: scripts/htmlcov
      - name: Set services list
        id: set-services
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo 'services=${{ github.event.inputs.services }}' >> $GITHUB_OUTPUT
          else
            export OTEL_RESOURCE_ATTRIBUTES="git.commit=${{ github.sha }},service.name=github-actions-services,service.namespace=github-actions,deployment.environment=dev"
            export OTEL_EXPORTER_OTLP_ENDPOINT="https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"
            export OTEL_EXPORTER_OTLP_HEADERS="${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}"
            export OTEL_EXPORTER_OTLP_PROTOCOL="http/protobuf"
            export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
            pip install -r scripts/requirements.txt
            opentelemetry-bootstrap -a install
            if [ -z "${{ github.head_ref }}" ];
            then
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.ref_name }})
              echo "GIT_BRANCH=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            else
              last_successful_commit=$(opentelemetry-instrument python scripts/services.py --last-green --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --branch ${{ github.head_ref }})
              echo "GIT_BRANCH=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            fi
            echo "Last successful commit: ${last_successful_commit}"
            if ! git cat-file -e "${last_successful_commit}^{commit}" 2>/dev/null; then
              git fetch origin main
              last_successful_commit=$(git merge-base HEAD origin/main)
            fi
            services_all=$(opentelemetry-instrument python scripts/services.py --cmp ${last_successful_commit})
            services_json=$(echo "$services_all" | jq -c '.services')
            docker_json=$(echo "$services_all" | jq -c '.docker')
            infra_json=$(echo "$services_all" | jq -c '.infra')
            # Debug output
            echo "Generated services JSON: $services_json"
            echo "Generated infra JSON: $infra_json"
            echo "Generated docker JSON: $docker_json"

            echo "services=${services_json}" >> $GITHUB_OUTPUT
            echo "infra=${infra_json}" >> $GITHUB_OUTPUT
            echo "docker=${docker_json}" >> $GITHUB_OUTPUT
          fi
  publish_docker:
    needs: setup
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: publish
      run_tests: false
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.docker) }}
    if: ${{ needs.setup.outputs.docker != '[]' }}
  build_services:
    needs: [setup, publish_docker]
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: build
      run_tests: true
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    if: ${{ always() && needs.setup.outputs.services != '[]' && (needs.publish_docker.result == 'success' || needs.publish_docker.result == 'skipped') }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
  build_infra:
    needs: [setup, publish_docker]
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      artifact_tar: true
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: build
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    if: ${{ always() && needs.setup.outputs.infra != '[]' && (needs.publish_docker.result == 'success' || needs.publish_docker.result == 'skipped' ) }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.infra) }}
    
  publish_services:
    needs: [setup, build_services]
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: publish
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #if: ${{ always() && github.ref_name == 'main' && needs.build_services.result == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
  deploy_infra:
    needs: [setup, build_infra]
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: deploy
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #if: ${{ always() && github.ref_name == 'main' && needs.build_infra.result == 'success' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.infra) }}
  deploy_services:
    needs: [setup, deploy_infra, publish_services]
    uses: ./.github/workflows/service.yml
    with:
      name: ${{ matrix.service.name }}
      path: ${{ matrix.service.path }}
      artifact: ${{ matrix.service.artifact }}
      artifact_path: ${{ matrix.service.artifact_path }}
      git_branch: ${{ needs.setup.outputs.git_branch }}
      save: ${{ toJson(matrix.service.save) }}
      load: ${{ matrix.service.load }}
      authentication_azure: ${{ matrix.service.authentication.azure == 'enabled' }}
      authentication_gcp: ${{ matrix.service.authentication.gcp == 'enabled' }}
      target: deploy
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #if: ${{ always() && github.ref_name == 'main' && needs.deploy_infra.result == 'success' && needs.publish_services.result == 'success' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}