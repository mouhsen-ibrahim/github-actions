name: Reusable service workflow

on:
  workflow_call:
    inputs:
      service:
        type: object
        required: true
        properties:
          name:
            type: string
            required: true
          path:
            type: string
            required: true
          authentication:
            type: object
            required: true
            properties:
              azure:
                type: string
                enum: [enabled, disabled]
                required: true
              gcp:
                type: string
                enum: [enabled, disabled]
                required: true
          load:
            type: string
            required: false
            default: ''
          save:
            type: string
            required: false
            default: ''
      target:
        type: string
        required: true
      run_tests:
        type: boolean
        required: false
        default: true
    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      GCP_PROJECT_ID:
        required: false
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: false
      GCP_SERVICE_ACCOUNT:
        required: false
      GCP_BUCKET_NAME:
        required: false
      GITHUB_TOKEN:
        required: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: get docker registry
        id: get_docker_registry
        run: |
          echo "Getting docker registry"
          echo "DOCKER_REGISTRY=$(cat Makefile.variables | grep -oP 'DOCKER_REGISTRY=\K[^ ]+')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_docker_registry.outputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Azure Login with OIDC
        if: ${{ inputs.service.authentication.azure == 'enabled' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to GCP
        uses: google-github-actions/auth@v3
        if: ${{ inputs.service.authentication.gcp == 'enabled' || inputs.service.load != '' }}
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: access_token
      - name: Save data to GCS
        if: ${{ inputs.service.save != '' }}
        run: |
          echo "Saving data to GCS: ${{ inputs.service.name }}"
          echo '${{ toJson(inputs.service.save) }}' > state.json
          gcloud storage cp state.json gs://${{ secrets.GCP_BUCKET_NAME }}/${{ inputs.service.name }}/${{ needs.setup.outputs.git_banch }}.json
      - name: load state
        id: state
        if: ${{ inputs.service.load != '' }}
        shell: bash
        run: |
          path="gs://${{ secrets.GCP_BUCKET_NAME }}/${{ inputs.service.load }}/${{ needs.setup.outputs.git_banch }}.json"
          fallback="gs://${{ secrets.GCP_BUCKET_NAME }}/${{ inputs.service.load }}/main.json"
          if gcloud storage ls "$path"; then
            JSON=$(gcloud storage cat "$path")
            echo "Using branch state: $path"
          elif gcloud storage ls "$fallback"; then
            JSON=$(gcloud storage cat "$fallback")
            echo "Branch state missing; using fallback: $fallback"
          else
            echo "No state found for branch or main."
            exit 0
          fi
          jq -c '.[]' <<<"$JSON" | while IFS= read -r obj; do
            envKey=$(jq -r '.envKey // .key // empty' <<<"$obj")
            val=$(jq -r '.value // empty' <<<"$obj")
            if [[ -n "$envKey" && -n "$val" ]]; then
              echo "$envKey=$val" >> "$GITHUB_ENV"
            fi
          done
      - name: ${{ inputs.target }} service
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          [ -f "${HOME}/.config/gcloud/application_default_credentials.json" ] || mkdir -p ${HOME}/.config/gcloud && touch "${HOME}/.config/gcloud/application_default_credentials.json"
          echo "${{ inputs.target }}ing service: ${{ inputs.service.name }}"
          echo "Service path: ${{ inputs.service.path }}"
          cd "${{ inputs.service.path }}"
          if [ -f "Makefile" ]; then
            make ${{ inputs.target }}
          else
            echo "No Makefile found in ${{ inputs.service.path }}"
          fi
      - name: Create tarball for artifacts
        if: ${{ inputs.service.artifact != '' }}
        run: tar -czf ${{ inputs.service.artifact }}.tar -C ${{ inputs.service.artifact_path }} .
      - name: Save service artifacts
        if: ${{ inputs.service.artifact != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service.artifact }}
          path: ${{ inputs.service.artifact }}.tar

      - name: Test service
        if: ${{ inputs.run_tests }}
        run: |
          echo "Testing service: ${{ inputs.service.name }}"
          cd "${{ inputs.service.path }}"
          if [ -f "Makefile" ]; then
            make test
          else
            echo "No Makefile found for testing in ${{ inputs.service.path }}"
          fi